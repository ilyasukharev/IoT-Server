package com.iotserv.utils

object RoutesResponses {
    const val userAlreadyExists = "User already exists"
    const val userNotFound = "User not found"
    const val authorizationHasBeenCompleted = "Authorization has been completed"
    const val attemptToSendVerifyCode = "Attempt to send verify code"
    const val verifyCodeWasSent = "Verify code was sent"
    const val sendingEmailWithVerifyCode = "Sending email with verify code"
    const val attemptToRegister = "Attempt to register"
    const val successfullyRegistered = "Successfully registered"
    const val clientConnected = "Client connected"
    const val attemptToConnect2Sides = "Attempt to connect two sides"
    const val dataHasBeenAccepted = "Data has been accepted"
    const val attemptToLogin = "Attempt to login"
    const val attemptToResetPassword = "Attempt to reset password"
    const val attemptToChangePassword = "Attempt to change password"
    const val attemptToChangePersonalData = "Attempt to change personal data"
    const val boardConnected = "Board connected"
    const val userHasNotBeenAdded = "The user has not been added"
    const val userNotFoundOrPasswordIsIncorrect = "Such user not found or password is incorrect"
    const val userIdWasNotFound = "User id was not found"
    const val authorizationBoardError = "Authorization board error"
    const val connectionTimeWasUp = "Connection time was up"
    const val codeIsRight = "Code is right"
    const val codeIsWrong = "Code is wrong"
    const val codeIsWrongOrNotVerified = "Code is wrong or not verified"
    const val passwordWasSuccessfullyChanged = "Password was successfully changed"
    const val dataWasSuccessfullyChanged = "Data was successfully changed"
    const val incorrectNumberLength = "Incorrect number length"
    const val incorrectNumberFormat = "Incorrect number format"
    const val incorrectEmailFormat = "Incorrect email format"
    const val incorrectEmailLength = "Incorrect email length"
    const val incorrectPasswordLength = "Incorrect password length"
    const val incorrectCodeLength = "Incorrect code length"
    const val incorrectCodeFormat = "Incorrect code format"
    const val suchSocketAlreadyExists = "Such socket already exists"
    const val successfullyBoardConnection = "Successfully board connection"
    const val noBoardConnection = "No board connection"
    const val sendingSettingsAccepted = "Sending settings accepted"
    const val settingsSuccessfullyReceived = "Settings successfully received"
    const val unknownSocketCommand = "Unknown socket command"
    const val boardWasFound = "Board was found"
    const val boardWasNotFound = "Board was not found"
    const val deviceHasNotBeenAdded = "Device has not been added"
    const val suchDeviceIdAlreadyRegistered = "Such device id already registered"
    const val deviceIdWasNotFound = "Device id was not found"
    const val integrityObjectsViolation = "Integrity objects violation"
    const val dataWereSuccessfullyWrote = "Data were successfully wrote"
    const val deviceHasNotBeenAddedToUserBase = "Device has not been added to user base"
    const val arrivedSettingsIsIncorrect = "Arrived settings is incorrect"
    const val loggerFileIsNotExists = "Logger file is not exists"
    const val loggerCanNotLogging = "Logger can not logging"
    const val redisIsNotConnect = "Redis is not connect"
    const val flushingDeviceSensors = "Flushing device sensors"
    const val authorizationError = "Authorization error"
    const val sendingBoardIDAccepted = "Sending board id accepted"
    const val boardIDSuccessfullyReceived = "Board id successfully received"
    const val arrivedBoardIDIsIncorrect = "Arrived board id is incorrect"
    const val boardIdWasNotFound = "Board id was not found"
    const val serializationFailed = "Serialization failed"
    const val searchingTheClient = "Searching the client"
}